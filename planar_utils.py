{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport sklearn\nimport sklearn.datasets\nimport sklearn.linear_model\n\ndef plot_decision_boundary(model, X, y):\n    # Set min and max values and give it some padding\n    x_min, x_max = X[0, :].min() - 1, X[0, :].max() + 1\n    y_min, y_max = X[1, :].min() - 1, X[1, :].max() + 1\n    h = 0.01\n    # Generate a grid of points with distance h between them\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\n    # Predict the function value for the whole grid\n    Z = model(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n    # Plot the contour and training examples\n    plt.contourf(xx, yy, Z, cmap=plt.cm.Spectral)\n    plt.ylabel('x2')\n    plt.xlabel('x1')\n    plt.scatter(X[0, :], X[1, :], c=y, cmap=plt.cm.Spectral)\n    \n\ndef sigmoid(x):\n    \"\"\"\n    Compute the sigmoid of x\n\n    Arguments:\n    x -- A scalar or numpy array of any size.\n\n    Return:\n    s -- sigmoid(x)\n    \"\"\"\n    s = 1/(1+np.exp(-x))\n    return s\n\ndef load_planar_dataset():\n    np.random.seed(1)\n    m = 400 # number of examples\n    N = int(m/2) # number of points per class\n    D = 2 # dimensionality\n    X = np.zeros((m,D)) # data matrix where each row is a single example\n    Y = np.zeros((m,1), dtype='uint8') # labels vector (0 for red, 1 for blue)\n    a = 4 # maximum ray of the flower\n\n    for j in range(2):\n        ix = range(N*j,N*(j+1))\n        t = np.linspace(j*3.12,(j+1)*3.12,N) + np.random.randn(N)*0.2 # theta\n        r = a*np.sin(4*t) + np.random.randn(N)*0.2 # radius\n        X[ix] = np.c_[r*np.sin(t), r*np.cos(t)]\n        Y[ix] = j\n        \n    X = X.T\n    Y = Y.T\n\n    return X, Y\n\ndef load_extra_datasets():  \n    N = 200\n    noisy_circles = sklearn.datasets.make_circles(n_samples=N, factor=.5, noise=.3)\n    noisy_moons = sklearn.datasets.make_moons(n_samples=N, noise=.2)\n    blobs = sklearn.datasets.make_blobs(n_samples=N, random_state=5, n_features=2, centers=6)\n    gaussian_quantiles = sklearn.datasets.make_gaussian_quantiles(mean=None, cov=0.5, n_samples=N, n_features=2, n_classes=2, shuffle=True, random_state=None)\n    no_structure = np.random.rand(N, 2), np.random.rand(N, 2)\n    \n    return noisy_circles, noisy_moons, blobs, gaussian_quantiles, no_structure","metadata":{"_uuid":"dcadb4c2-4686-474a-9b9e-98529f9da5e2","_cell_guid":"6832e496-e519-4537-ae70-2c66c92881c1","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}